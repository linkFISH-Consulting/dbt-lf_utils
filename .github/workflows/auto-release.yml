name: Auto Release

on:
  push:
    branches: [ main ]

jobs:
  check-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare versions

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep "^version:" dbt_project.yml | sed "s/version: *'\([^']*\)'/\1/" | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get previous version
        id: previous_version
        run: |
          # Get the version from the previous commit
          git checkout HEAD~1 -- dbt_project.yml 2>/dev/null || echo "No previous version found"
          if [ -f dbt_project.yml ]; then
            PREV_VERSION=$(grep "^version:" dbt_project.yml | sed "s/version: *'\([^']*\)'/\1/" | tr -d ' ')
            echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
            echo "Previous version: $PREV_VERSION"
          else
            echo "previous_version=" >> $GITHUB_OUTPUT
            echo "No previous version found"
          fi
          # Restore current version
          git checkout HEAD -- dbt_project.yml

      - name: Check if version changed
        id: version_changed
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          PREVIOUS="${{ steps.previous_version.outputs.previous_version }}"

          if [ "$CURRENT" != "$PREVIOUS" ] && [ -n "$CURRENT" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged or invalid"
          fi

      - name: Create Release
        if: steps.version_changed.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          TAG_NAME="v$VERSION"

          # Create and push tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

          # Create release with changelog
          if [ -f changelog.txt ]; then
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes-file changelog.txt
          else
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "Release $TAG_NAME"
          fi

      - name: Output result
        run: |
          if [ "${{ steps.version_changed.outputs.changed }}" == "true" ]; then
            echo "✅ Created release for version ${{ steps.current_version.outputs.version }}"
          else
            echo "ℹ️ No version change detected, skipping release creation"
          fi
